using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Fluentley.AuditTrails.Core.Attributes;
using Fluentley.AuditTrails.Core.Models;
using Fluentley.AuditTrails.Services.Extensions;
using Fluentley.AuditTrails.Services.Models;
using Microsoft.EntityFrameworkCore;

namespace Fluentley.AuditTrails.Services
{
    public class AuditTrailService
    {
        private readonly DbContext _context;

        public AuditTrailService(DbContext context)
        {
            _context = context;
            Audits = new List<AuditTrail>();
        }

        internal List<AuditTrail> Audits { get; }

        public async Task<List<AuditTrail>> SaveChangesAsync(Func<DbContext, Task<int>> method)
        {
            var auditEntries = OnBeforeSaveChanges();
            await method(_context);
            await OnAfterSaveChanges(auditEntries);
            return Audits;
        }

        internal List<AuditEntry> OnBeforeSaveChanges()
        {
            _context.ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in _context.ChangeTracker.Entries())
            {
                var attributeValue = entry.Metadata.ClrType.CustomAttribute<AuditTrailsAttribute>();

                if (attributeValue == null || attributeValue.Ignore) continue;

                var currentValues = entry.GetDatabaseValues();
                if (currentValues != null)
                    entry.OriginalValues.SetValues(currentValues);

                var auditEntry = new AuditEntry(entry) { TableName = entry.Metadata.Relational().TableName };
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property?.OriginalValue == null && property?.CurrentValue != null)
                        property.IsModified = false;

                    if (property.IsModified && property?.CurrentValue == null && property?.OriginalValue != null)
                        property.IsModified = false;

                    if (property.IsModified && property?.CurrentValue == null && property?.OriginalValue == null)
                        property.IsModified = false;

                    if (property.IsModified && property.OriginalValue.Equals(property.CurrentValue))
                        property.IsModified = false;

                    if (property.Metadata.PropertyInfo == null)
                        continue;

                    var propertyAuditAttribute =
                        property.Metadata.PropertyInfo.PropertyCustomAttribute<AuditTrailsAttribute>();
                    if (propertyAuditAttribute != null && propertyAuditAttribute.Ignore)
                        continue;

                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    //property.Metadata.PropertyInfo.GetCustomAttributes()
                    var propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }

                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
                if (auditEntry.NewValues.Count > 0 || auditEntry.OldValues.Count > 0)
                    Audits.Add(auditEntry.ToAudit());

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        internal Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                    if (prop.Metadata.IsPrimaryKey())
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    else
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;

                Audits.Add(auditEntry.ToAudit());
            }

            return Task.CompletedTask;
        }
    }
}